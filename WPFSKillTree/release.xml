<?xml version="1.0" encoding="utf-8" ?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
    <!-- MSBuild file used by dist-*.bat scripts -->
    <Import Project="$(MSBuildProjectDirectory)\Tools\MSBuild.ExtensionPack.tasks" />

    <!-- Takes LocaleLanguageDir items and outputs same items with "Locale" metadata set to correct PO locale -->
    <UsingTask TaskName="PupulateLocale" TaskFactory="CodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v$(MSBuildToolsVersion).dll">
        <ParameterGroup>
            <Dirs ParameterType="Microsoft.Build.Framework.ITaskItem[]" Required="true" />
            <Locales ParameterType="Microsoft.Build.Framework.ITaskItem[]" Output="true" />
        </ParameterGroup>
        <Task>
            <Code Type="Fragment" Language="cs">
                <![CDATA[
                if (Dirs.Length > 0)
                {
                    Locales = new TaskItem[Dirs.Length];
                    for (int i = 0; i < Dirs.Length; i++)
                    {
                        ITaskItem item = Dirs[i];

                        string[] subtags = item.GetMetadata("Filename").Split('-');
                        string language = subtags[0];
                        string variant = subtags.Length > 1 && subtags[1].Length >= 3 ? subtags[1] : null;
                        string region = subtags.Length > 2 && subtags[2].Length == 2 ? subtags[2] : (subtags.Length > 1 && subtags[1].Length == 2 ? subtags[1] : null);

                        string locale = language.ToLowerInvariant();
                        if (region != null) locale += "_" + region.ToUpperInvariant();
                        if (variant != null) locale += "@" + variant.ToLowerInvariant();

                        Locales[i] = new TaskItem(item.ItemSpec);
                        item.CopyMetadataTo(Locales[i]);
                        Locales[i].SetMetadata("Locale", locale);
                    }
                }
]]>
            </Code>
        </Task>
    </UsingTask>

    <UsingTask TaskName="AssemblyInvokeStatic" TaskFactory="CodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v$(MSBuildToolsVersion).dll">
        <ParameterGroup>
            <AssemblyFile ParameterType="System.String" Required="true" />
            <ClassFullName ParameterType="System.String" Required="true" />
            <Method ParameterType="System.String" Required="true" />
            <Input1 ParameterType="System.String" Required="false" />
            <Input2 ParameterType="System.String" Required="false" />
            <ReturnValue ParameterType="System.String" Output="true" />
        </ParameterGroup>
        <Task>
            <Using Namespace="System.IO" />
            <Using Namespace="System.Reflection" />
            <Code Type="Fragment" Language="cs">
                <![CDATA[
                Assembly assembly = System.Reflection.Assembly.LoadFrom(AssemblyFile);
                Type classType = assembly.GetType(ClassFullName);
                MethodInfo method = classType.GetMethod(Method, BindingFlags.Public|BindingFlags.Static);

                object[] parameters;
                if (Input2 != null)
                {
                    parameters = new object[] { Input1, Input2 };
                }
                else if (Input1 != null)
                {
                    parameters = new object[] { Input1 };
                }
                else
                    parameters = null;

                object retVal = method.Invoke(null, parameters);

                ReturnValue = retVal is string ? retVal as string : null;
]]>
            </Code>
        </Task>
    </UsingTask>

    <PropertyGroup>
        <InstallDir>PoESkillTree</InstallDir>
        <Platform>x86</Platform>
        <WorkDir>$(MSBuildProjectDirectory)\dist</WorkDir>
        <ZipTool>Tools\7z.exe a -tzip</ZipTool>
        <ISCCTool>Tools\isetup\ISCC.exe</ISCCTool>
    </PropertyGroup>

    <PropertyGroup>
        <DistDir>$(WorkDir)\$(InstallDir)</DistDir>
        <TagFile>$(WorkDir)\tag</TagFile>
        <RevisionCountFile>$(WorkDir)\revcount</RevisionCountFile>
        <ObjDir>obj</ObjDir>
    </PropertyGroup>

    <PropertyGroup>
        <DefaultCatalogDir>en-US</DefaultCatalogDir>
        <LocaleXGettextKeywords>-kL10n.Message -kL10n.Message:1,2c -kL10n.Plural:1,2 -kL10n.Plural:1,2,4c</LocaleXGettextKeywords>
        <LocaleDir>Locale</LocaleDir>
        <LocaleMessageFilename>Messages.po</LocaleMessageFilename>
        <LocaleTemplateFilename>Messages.pot</LocaleTemplateFilename>
        <LocaleTemplateFile>$(LocaleDir)\$(LocaleTemplateFilename)</LocaleTemplateFile>
        <LocaleWorkDir>$(ObjDir)\$(LocaleDir)</LocaleWorkDir>
        <LocaleWorkTemplateFile>$(ObjDir)\$(LocaleDir)\$(LocaleTemplateFilename)</LocaleWorkTemplateFile>
    </PropertyGroup>

    <ItemGroup>
        <CSFile Include="**\*.cs" Exclude="$(ObjDir)\**" />
        <XAMLFile Include="**\*.xaml" Exclude="$(LocaleWorkDir)\**" />
        <LocaleLanguageDir Include="$([System.IO.Directory]::GetDirectories(&quot;$(LocaleDir)&quot;))" Exclude="$(LocaleDir)\$(DefaultCatalogDir)">
            <MessageFile>%(Identity)\$(LocaleMessageFilename)</MessageFile>
        </LocaleLanguageDir>
        <LocaleCopyFiles Include="$(LocaleDir)\**" />
    </ItemGroup>

    <ItemGroup>
        <PortableIniLines Include="line1">
            <Line>[Setup]</Line>
        </PortableIniLines>
        <PortableIniLines Include="line2">
            <Line>Language=en_US</Line>
        </PortableIniLines>
    </ItemGroup>

    <Target Name="Build" DependsOnTargets="Clean;Identity">
        <!-- Files updated by this target -->
        <ItemGroup>
            <ApplicationManifest Include="Properties\app.manifest" />
            <AssemblyInfoFiles Include="Properties\AssemblyInfo.cs" />
            <AssemblyInfoFiles Include="..\UpdateDB\Properties\AssemblyInfo.cs" />
        </ItemGroup>

        <!-- Create working directory for release -->
        <MakeDir Directories="$(WorkDir)" />

        <!-- Update AssemblyInfo files. Don't update AssemblyTitle. PoESkillTree.exe and UpdateDB.exe must have own AssemblyTitle. -->
        <AssemblyInfo AssemblyInfoFiles="@(AssemblyInfoFiles)" UpdateAssemblyInformationalVersion="true"
                      AssemblyVersion="$(AssemblyVersion)"
                      AssemblyFileVersion="$(FileVersion)"
                      AssemblyInformationalVersion="$(ProductVersion)"
                      AssemblyDescription="$(AssemblyDescription)" AssemblyCopyright="$(AssemblyCopyright)"
                      AssemblyCompany="$(AssemblyCompany)" AssemblyProduct="$(ProductName)" />

        <!-- Generate app.manifest -->
        <GenerateApplicationManifest ManifestType="Native" InputManifest="@(ApplicationManifest -> '%(Identity).i')" OutputManifest="@(ApplicationManifest)"
                                     AssemblyName="$(AssemblyName).exe" AssemblyVersion="$(AssemblyVersion)" />

        <!-- Build projects (OutputPath=$(DistDir) => No copying needed) -->
        <MSBuild Projects="WPFSKillTree.csproj" Targets="Build" Properties="Configuration=Release;Platform=$(Platform);WarningLevel=0;OutputPath=$(DistDir)" />
        <MSBuild Projects="..\UpdateDB\UpdateDB.csproj" Targets="Build" Properties="Configuration=Release;Platform=$(Platform);WarningLevel=0;OutputPath=$(DistDir)" />
    </Target>

    <Target Name="BuildLocale" DependsOnTargets="BuildLocaleCatalog">
        <!-- Don't make any dependencies on this target, it's invoked explicitely as Post-Build event -->
    </Target>

    <Target Name="BuildAndCopyLocale" DependsOnTargets="BuildLocaleCatalog">
        <Copy SourceFiles="@(LocaleCopyFiles)" DestinationFiles="@(LocaleCopyFiles->'$(LocaleTargetDir)$(LocaleDir)\%(RecursiveDir)%(Filename)%(Extension)')" />
    </Target>

    <Target Name="TransformXAML">
        <!-- Make output directory for fake C# file -->
        <MakeDir Directories="@(XAMLFile->'$(LocaleWorkDir)\%(RecursiveDir)')" />

        <!-- Transform XAML file to fake C# file -->
        <Exec Command="Tools\XAMLText %(XAMLFile.Identity) $(LocaleWorkDir)\%(XAMLFile.RecursiveDir)%(XAMLFile.Filename)%(XAMLFile.Extension)" />
    </Target>

    <Target Name="BuildLocaleTemplate" DependsOnTargets="TransformXAML">
        <PropertyGroup>
            <LocaleXAMLFileList>@(XAMLFile->'%(RecursiveDir)%(Filename)%(Extension)', ' ')</LocaleXAMLFileList>
        </PropertyGroup>

        <!-- Extract messages from transformed XAML files -->
        <Exec Command="Tools\gettext\xgettext -L C# --from-code=UTF-8 --omit-header --no-wrap -k $(LocaleXGettextKeywords) -o $(LocaleWorkTemplateFile) -D $(LocaleWorkDir) $(LocaleXAMLFileList)" />

        <!-- Extract messages from source C# files -->
        <Exec Command="Tools\gettext\xgettext -L C# --from-code=UTF-8 --omit-header --no-wrap -k $(LocaleXGettextKeywords) -j -o $(LocaleWorkTemplateFile) @(CSFile, ' ')" />

        <!-- Remove BOM from template messages -->
        <Exec Command="Tools\DeBOM $(LocaleWorkTemplateFile)" />
        <!-- Merge extracted messages into template messages -->
        <Exec Command="Tools\gettext\msgmerge -U --backup=none --no-wrap $(LocaleTemplateFile) $(LocaleWorkTemplateFile)" />
    </Target>

    <Target Name="BuildLocalePopulateLocales" DependsOnTargets="BuildLocaleTemplate">
        <PupulateLocale Dirs="@(LocaleLanguageDir)">
            <Output ItemName="LocaleLocales" TaskParameter="Locales" />
        </PupulateLocale>
    </Target>
    
    <Target Name="BuildLocaleCatalog" DependsOnTargets="BuildLocalePopulateLocales">
        <!-- Remove BOM from catalog messages -->
        <Exec Command="Tools\DeBOM %(LocaleLocales.MessageFile)"
              Condition="Exists('%(LocaleLocales.MessageFile)')" />

        <!-- Merge template messages into catalog messages -->
        <Exec Command="Tools\gettext\msgmerge -U --backup=none --no-wrap %(LocaleLocales.MessageFile) $(LocaleTemplateFile)"
              Condition="Exists('%(LocaleLocales.MessageFile)')" />

        <!-- Create catalog messages -->
        <Exec Command="Locale\msginit -i $(LocaleTemplateFile) -o %(LocaleLocales.MessageFile) -l %(LocaleLocales.Locale) --no-wrap --no-translator"
              Condition="!Exists('%(LocaleLocales.MessageFile)')" />
    </Target>

    <Target Name="Clean">
        <MSBuild Projects="..\UnitTests\UnitTests.csproj" Targets="Clean" Properties="Configuration=Debug;Platform=$(Platform);WarningLevel=0" />
        <MSBuild Projects="..\UpdateDB\UpdateDB.csproj" Targets="Clean" Properties="Configuration=Release;Platform=$(Platform);WarningLevel=0;OutputPath=$(DistDir)" />
        <MSBuild Projects="WPFSKillTree.csproj" Targets="Clean" Properties="Configuration=Release;Platform=$(Platform);WarningLevel=0;OutputPath=$(DistDir)" />
        <RemoveDir Directories="$(LocaleWorkDir)" />
        <RemoveDir Directories="$(WorkDir)" />
    </Target>

    <!-- Target fetches all properties used to identify application and release -->
    <Target Name="Identity">
        <!-- Create properties from Properties\Version.resx -->
        <XmlPeek XmlInputPath="Properties\Version.resx" Query="//root/data[@name='AppId']/value/text()">
            <Output PropertyName="AppId" TaskParameter="Result" />
        </XmlPeek>
        <XmlPeek XmlInputPath="Properties\Version.resx" Query="//root/data[@name='AssemblyCompany']/value/text()">
            <Output PropertyName="AssemblyCompany" TaskParameter="Result" />
        </XmlPeek>
        <XmlPeek XmlInputPath="Properties\Version.resx" Query="//root/data[@name='AssemblyCopyright']/value/text()">
            <Output PropertyName="AssemblyCopyright" TaskParameter="Result" />
        </XmlPeek>
        <XmlPeek XmlInputPath="Properties\Version.resx" Query="//root/data[@name='AssemblyDescription']/value/text()">
            <Output PropertyName="AssemblyDescription" TaskParameter="Result" />
        </XmlPeek>
        <XmlPeek XmlInputPath="Properties\Version.resx" Query="//root/data[@name='AssemblyVersion']/value/text()">
            <Output PropertyName="AssemblyVersion" TaskParameter="Result" />
        </XmlPeek>
        <XmlPeek XmlInputPath="Properties\Version.resx" Query="//root/data[@name='ProductName']/value/text()">
            <Output PropertyName="ProductName" TaskParameter="Result" />
        </XmlPeek>
        <XmlPeek XmlInputPath="Properties\Version.resx" Query="//root/data[@name='ProductVersion']/value/text()">
            <Output PropertyName="ProductVersion" TaskParameter="Result" />
        </XmlPeek>
        <XmlPeek XmlInputPath="Properties\Version.resx" Query="//root/data[@name='ProductURL']/value/text()">
            <Output PropertyName="ProductURL" TaskParameter="Result" />
        </XmlPeek>

        <!-- Get assembly name from WPFSKillTree project file -->
        <XmlPeek XmlInputPath="WPFSKillTree.csproj" Query="//p:Project/p:PropertyGroup/p:AssemblyName/text()"
                 Namespaces="&lt;Namespace Prefix='p' Uri='http://schemas.microsoft.com/developer/msbuild/2003'/&gt;">
            <Output PropertyName="AssemblyName" TaskParameter="Result" />
        </XmlPeek>

        <!-- Create working directory for temporary files -->
        <MakeDir Directories="$(WorkDir)" />

        <!-- Compare ProductVersion with recent Git tag (version) -->
        <Exec Command="git describe --tags --abbrev=0 >$(TagFile)" />
        <ReadLinesFromFile File="$(TagFile)">
            <Output PropertyName="GitVersion" TaskParameter="Lines" />
        </ReadLinesFromFile>
        <Message Text="%09Release product version: $(ProductVersion)" />
        <Message Text="%09Recent Git version: $(GitVersion)" />
        <Error Text="Release product version and recent Git version are identical!%0APlease, edit ProductVersion of Properties\Version.resx file to reflect a new release."
               Condition="'$(ProductVersion)' == '$(GitVersion)'" />

        <!-- Create FileVersion from ProductVersion using Git revision count as build number -->
        <Exec Command="git rev-list --count HEAD >$(RevisionCountFile)" />
        <ReadLinesFromFile File="$(RevisionCountFile)">
            <Output PropertyName="BuildNumber" TaskParameter="Lines" />
        </ReadLinesFromFile>
        <Message Text="%09Revision count: $(BuildNumber)" />
        <PropertyGroup>
            <!-- Keep only leading digits from Revision of ProductVersion and add format item for BuildNumber -->
            <FormatFileVersion>$([System.Text.RegularExpressions.Regex]::Replace($(ProductVersion), "\.([0-9]+)([a-zA-Z][a-zA-Z0-9]+)?$", ".$1.{0}"))</FormatFileVersion>
            <!-- Set BuildNumber -->
            <FileVersion>$([System.String]::Format($(FormatFileVersion), $(BuildNumber)))</FileVersion>
        </PropertyGroup>
    </Target>

    <Target Name="Release" DependsOnTargets="Test">
        <!-- Download skill tree assets -->
        <Exec Command="$(DistDir)\UpdateDB.exe /A" WorkingDirectory="$(DistDir)" />

        <!-- Create empty PersistentData template file -->
        <AssemblyInvokeStatic AssemblyFile="$(DistDir)\$(AssemblyName).exe"
                              ClassFullName="POESKillTree.Model.PersistentData"
                              Method="CreateSetupTemplate"
                              Input1="$(DistDir)"
                              Input2="%LANGUAGE%" />

        <!-- Create PackageName from ProductName -->
        <AssemblyInvokeStatic AssemblyFile="$(DistDir)\$(AssemblyName).exe"
                              ClassFullName="POESKillTree.SkillTreeFiles.Updater"
                              Method="GetPackageName"
                              Input1="$(ProductName)">
            <Output PropertyName="PackageName" TaskParameter="ReturnValue" />
        </AssemblyInvokeStatic>

        <!-- Create release installer -->
        <Exec Command="..\$(ISCCTool) /dAppId=$(AppId) /dAssemblyCompany=&quot;$(AssemblyCompany)&quot; /dAssemblyCopyright=&quot;$(AssemblyCopyright)&quot; /dAssemblyName=&quot;$(AssemblyName)&quot; /dFileVersion=&quot;$(FileVersion)&quot; /dPackageName=&quot;$(PackageName)&quot; /dProductName=&quot;$(ProductName)&quot; /dProductURL=&quot;$(ProductURL)&quot; /dProductVersion=$(ProductVersion) /dProjectDir=&quot;$(MSBuildProjectDirectory)&quot; ..\release.iss" WorkingDirectory="$(WorkDir)" />

        <!-- Create Portable.ini file to include it into Zip package -->
        <WriteLinesToFile File="$(DistDir)\Portable.ini" Lines="@(PortableIniLines->'%(Line)')" Overwrite="true" />
        <!-- Delete PersistenData.xml file to exclude it from Zip package -->
        <Delete Files="$(DistDir)\PersistentData.xml" />

        <!-- Create release package -->
        <Exec Command="..\$(ZipTool) $(PackageName)-$(ProductVersion).zip $(InstallDir)" WorkingDirectory="$(WorkDir)" />
    </Target>

    <Target Name="Test" DependsOnTargets="Build">
        <!-- Build unit tests using project defined output path -->
        <MSBuild Projects="..\UnitTests\UnitTests.csproj" Targets="Build" Properties="Configuration=Debug;Platform=$(Platform);WarningLevel=0" />

        <!-- Run tests -->
        <Exec Command='vstest.console ..\..\UnitTests\bin\Debug\UnitTests.dll /TestCaseFilter:"TestCategory!=RequireGUI"' WorkingDirectory="$(WorkDir)" />
    </Target>

    <Target Name="Update">
        <!-- Make regular build using project defined output path -->
        <MSBuild Projects="..\UpdateDB\UpdateDB.csproj" Targets="Build" Properties="Configuration=Release;Platform=$(Platform);WarningLevel=0" />

        <!-- Update items database -->
        <Exec Command="..\UpdateDB\bin\Release\UpdateDB.exe /N" />

        <!-- Make regular clean using project defined output path -->
        <MSBuild Projects="..\UpdateDB\UpdateDB.csproj" Targets="Clean" Properties="Configuration=Release;Platform=$(Platform);WarningLevel=0" />
    </Target>
</Project>
